import companyBuses.*

test "The hurried person always wants to hop on to the bus" {
	assert.that(new Hurried().wantsToHopOnTo(bus))
}

test "You can't ask an undecided person whether or not he/she wants to hop on to the bus" {
	try{
		new Undecided().wantsToHopOnTo(bus)
		assert.fail("Should raise an exception and it doesn't")
	} 
	catch e:StillNotDedicedException {}
	catch e
		assert.error("Wrong exception raised")
}

test "A claustrophobic only wants to hop on to the bus when its volume is > 120" {
	/* Initial volume is 100 */
	assert.notThat(new Claustrophobic().wantsToHopOnTo(bus))
	bus.volume(150)
	assert.that(new Claustrophobic().wantsToHopOnTo(bus))
}

test "An obsequious person always wants the same as his/her boss" {
	var obsequious = new Obsequious()
	var boss = new Hurried() /* Always want to hop on */
	
	obsequious.boss(boss)
	assert.equals(boss.wantsToHopOnTo(bus),	obsequious.wantsToHopOnTo(bus)) /* Both want */
	
	boss = new Claustrophobic() /* Bus' volume is 100. New boss doesn't want to hop on */
	obsequious.boss(boss)
	assert.notThat(boss.wantsToHopOnTo(bus)) /* Neither wants */
	assert.notThat(obsequious.wantsToHopOnTo(bus)) /* Neither wants */
	
	bus.volume(150) /* Now the boss wants to hop on, and so the employee does too */
	assert.that(boss.wantsToHopOnTo(bus)) /* Both want */
	assert.that(obsequious.wantsToHopOnTo(bus)) /* Both want */
}

test "The lazy person wants to hop on if there are seats available" {
	assert.that(new Lazy().wantsToHopOnTo(bus))  /* Seats available */
	35.times({bus.hopOn(new Hurried())})
	console.println(bus.numberOfPeopleOnBoard())
	assert.that(!new Lazy().wantsToHopOnTo(bus)) /* No more seats available */
}